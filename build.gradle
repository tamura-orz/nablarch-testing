// -*- mode: groovy; coding: utf-8-unix -*-


group = 'com.nablarch.framework'
version = '1.1.1'
description = 'テスティングフレームワーク'


repositories {
  mavenLocal()
  maven { url nablarchRepoUrl }
  jcenter()
  
  // サードパーティ製ライブラリの格納リポジトリ
  if(project.hasProperty('nablarchExtRepoUrl')) {
     maven { url "${nablarchExtRepoUrl}" }
   }

}

buildscript {
  repositories {
    mavenLocal()
    maven { url nablarchRepoUrl }
    jcenter()
  
    // サードパーティ製ライブラリの格納リポジトリ
    if(project.hasProperty('nablarchExtRepoUrl')) {
       maven { url "${nablarchExtRepoUrl}" }
     }

  }
  dependencies {
    classpath "com.nablarch.dev:nablarch-gradle-plugin:${nablarchGradlePluginVersion}"
    classpath "net.saliman:gradle-cobertura-plugin:${coberturaPluginVersion}"
  }
}

apply {
  plugin 'com.nablarch.dev.nablarch-build'
  plugin 'com.nablarch.dev.nablarch-sonarqube'
  plugin 'com.nablarch.dev.nablarch-maven-deploy'
  plugin 'com.nablarch.dev.nablarch-version'
  plugin 'cobertura'
}

configurations {
  mock
  cobertura
}

sourceSets.test.compileClasspath = configurations.mock + sourceSets.test.compileClasspath
sourceSets.test.runtimeClasspath = configurations.mock + sourceSets.test.runtimeClasspath

configurations.all {
  resolutionStrategy {
    force 'junit:junit:4.10'
  }
}

dependencies {
  // nablarch
  // これらのモジュール内部のクラスを、コンポーネント定義ファイルにコンポーネントを定義せずに直接呼び出している。
  // このため、nablarch-testingの依存ライブラリとして明示的に定義しておく(プロジェクト側でpomに定義する必要がなくなる)
  // ※コンポーネント定義ファイルに定義した場合は、プロジェクトのpom(build.gradle)に依存ライブラリとして追加されているはずなので、
  // nablarch-testingの依存ライブラリとする必要はない
  compile "com.nablarch.framework:nablarch-common-dao:${nablarchCommonDaoVersion}"
  compile("com.nablarch.framework:nablarch-fw-web-extension:${nablarchFwWebExtensionVersion}") {
    exclude module: 'nablarch-core-dataformat'
  }

  mock('org.jmockit:jmockit:1.30')
  provided "com.nablarch.framework:nablarch-fw-web:${nablarchFwWebVersion}"
  provided "com.nablarch.framework:nablarch-fw-standalone:${nablarchFwStandaloneVersion}"
  provided "com.nablarch.framework:nablarch-fw-messaging-mom:${nablarchFwMessagingMomVersion}"
  provided "com.nablarch.framework:nablarch-fw-messaging-http:${nablarchFwMessagingHttpVersion}"
  provided "com.nablarch.framework:nablarch-fw-web-tag:${nablarchFwWebTagVersion}"
  provided "com.nablarch.framework:nablarch-fw-web-dbstore:${nablarchFwWebDbstoreVersion}"
  provided "com.nablarch.framework:nablarch-backward-compatibility:${nablarchBackwardCompatibilityVersion}"
  provided "com.nablarch.framework:nablarch-common-idgenerator-jdbc:${nablarchCommonIdgeneratorJdbcVersion}"
  // messaging
  compile 'org.apache.activemq:activemq-all:5.4.2'
  provided 'javax.jms:jms-api:1.1-rev-1'

  compile 'org.mortbay.jetty:jetty:6.1.24'

  // findbugs
  runtime 'xml-apis:xml-apis:1.0.b2'
  compile('com.google.code.findbugs:findbugs:1.3.9') {
    exclude group:'*', module: 'xercesImpl' // Xercesが使われないようにする
    exclude group:'*', module: 'xom'
  }

  // compile 'org.apache.poi:poi:3.8'
  compile 'org.apache.poi:poi-ooxml:3.8'
  compile 'junit:junit:4.10'

  runtime 'org.mortbay.jetty:jsp-2.1-glassfish:2.1.v20100127'
  runtime 'org.mortbay.jetty:jsp-api-2.1-glassfish:2.1.v20100127'

  testCompile 'org.hamcrest:hamcrest-all:1.1'

  // JPA
  testCompile (group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.5.1')

  // test support
  testCompile ('com.nablarch.dev:nablarch-test-support:0.0.8') {
    exclude module: 'junit'
  }
  // HereIs
  testCompile (group: 'com.nablarch.tool', name: 'nablarch-toolbox', version: '1.0.2')
  testRuntime files("${projectDir}/src/test/java/")
  
  // for UsageOfUnpublishedMethodDetectorTest
  testRuntime (group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0')

  cobertura "net.sourceforge.cobertura:cobertura:1.9.4"
}



processTestResources {
  doFirst {
    def dbType = System.getenv()['DB_TYPE']
    if (dbType != null && dbType != '') {
      new File("${projectDir}/src/test/resources/db.config").setText(new File("${projectDir}/src/test/resources/db/" + dbType + '-db.config').getText('UTF-8'), 'UTF-8')
      new File("${projectDir}/src/test/resources/datasource.xml").setText(new File("${projectDir}/src/test/resources/db/" + dbType + '-datasource.xml').getText('UTF-8'), 'UTF-8')
    }
  }
}

test {

  jvmArgs (
          '-XX:MaxPermSize=256m',
          '-Xmx512m',
          '-Dfile.encoding=UTF-8',
          '-Djava.net.preferIPv4Stack=true',
          '-XX:-UseSplitVerifier'
  )

  
  exclude '**/*Db2*',
          // テストの実行順に依存しているため、Suiteを利用して実行順を制御している。
          // Gradleでは、Suiteの実行対象に含まれていても、独立したクラスとしても実行されてしまうため、2重にテストが実行される。
          '**/*PublishedApisInfoTest$*Suite*', '**/*UsageOfUnpublishedMethodDetectorTest*'


  doFirst {
    def logDir = new File("${projectDir}/src/test/log")
    if (!logDir.exists()) {
      assert logDir.mkdirs()
    }
  }

  cobertura {
    coberturaVersion = '1.9.4.1'
    coverageSourceDirs = ["${projectDir}/src/main/java/"]
    //coverageIgnoreTrivial = true        // cobertura2.0以上じゃないと使えないらしい
    coverageFormats = ['xml']
    coverageDirs = [project.sourceSets.main.output.classesDir]
    coverageExcludes = [
            '.*Db2.*',
            '.*PublishedApisInfoTest\\$.*Suite.*',
            '.*UsageOfUnpublishedMethodDetectorTest.*'
    ]
  }
}

task coverage(dependsOn: ['clean', 'generateCoberturaReportByAnt'])


def coberturaReportDir = new File(project.buildDir, "cobertura-report")

task generateCoberturaReportByAnt(dependsOn: 'cobertura') {
  def dataFile = "${project.buildDir}/cobertura/cobertura.ser"

  inputs.file file(dataFile)
  outputs.dir coberturaReportDir

  doLast {
    ant {
      taskdef(resource: 'tasks.properties',
              classpath: configurations.cobertura.asPath)

      'cobertura-report'(
              destdir: coberturaReportDir,
              datafile: dataFile,
              srcdir: "${projectDir}/src/main/java/",
              format: 'xml'
      )
    }
  }
}

sonarRunner {
  sonarProperties {
    property "sonar.java.coveragePlugin", "cobertura"
    property "sonar.cobertura.reportPath", "${coberturaReportDir}/coverage.xml"
  }
}

tasks.sonarRunner {
  dependsOn = ['coverage']
}

// for open api
apply plugin: 'com.nablarch.dev.nablarch-published-api'

configurations {
  publishedApiDoc
}

dependencies {
  publishedApiDoc "com.nablarch.tool:nablarch-toolbox:1.0.2"
}

publishedApi {
  apiName = "NablarchApi"
}
generatePublishedApiDocForArchitect.dependsOn jar
generatePublishedApiDocForProgrammer.dependsOn jar

task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
}
